/* Autogenerated file. Do not edit manually. */

import { defineComponent, Type as RecsType, World } from "@dojoengine/recs";

export type ContractComponents = Awaited<ReturnType<typeof defineContractComponents>>;

export function defineContractComponents(world: World) {
  return {
    Game: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, next_to_move: RecsType.BigInt, minimum_moves: RecsType.Number, over: RecsType.Boolean, player_count: RecsType.Number, unit_count: RecsType.Number, nonce: RecsType.Number, price: RecsType.BigInt, clock: RecsType.BigInt, penalty: RecsType.BigInt, limit: RecsType.Number, winner: RecsType.BigInt, dtanks_host: RecsType.BigInt, seed: RecsType.BigInt, player_name: RecsType.BigInt, weather: RecsType.Number, pending_reveals: RecsType.Number },
        {
          metadata: {
            name: "Game",
            types: ["u32","contractaddress","u8","bool","u8","u32","u32","u256","u64","u64","u32","contractaddress","contractaddress","felt252","felt252","enum","u32"],
            customTypes: ["WeatherCondition"],
          },
        }
      );
    })(),
    Player: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, index: RecsType.Number, address: RecsType.BigInt, name: RecsType.BigInt, supply: RecsType.Number, real_tank_count: RecsType.Number, dummy_tank_count: RecsType.Number, last_action: RecsType.BigInt, rank: RecsType.Number, player_score: RecsType.Number, turns_remaining: RecsType.Number, turn_start_time: RecsType.BigInt, reveal: RecsType.Boolean, placements: RecsType.Number },
        {
          metadata: {
            name: "Player",
            types: ["u32","u32","contractaddress","felt252","u32","u8","u8","u64","u8","u32","u8","u64","bool","u32"],
            customTypes: [],
          },
        }
      );
    })(),
    Dtank: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, unit_id: RecsType.Number, player_id: RecsType.Number, ammunition: RecsType.Number, health: RecsType.Number, position: { row: RecsType.Number, col: RecsType.Number }, is_active: RecsType.Boolean, target_id: RecsType.Number, commitment: RecsType.BigInt, pending_damage: RecsType.Number },
        {
          metadata: {
            name: "Dtank",
            types: ["u32","u32","u32","u32","u32","u32","u32","bool","u32","felt252","u32"],
            customTypes: ["GridPosition"],
          },
        }
      );
    })(),
    Tile: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, row: RecsType.Number, col: RecsType.Number, plants: { position: { row: RecsType.Number, col: RecsType.Number }, plant_density: RecsType.Number, nb_stacks: RecsType.Number }, tree: { position: { row: RecsType.Number, col: RecsType.Number }, capacity: RecsType.Number, cell_size: { width: RecsType.Number, height: RecsType.Number } }, size: RecsType.Number, occupied: RecsType.Boolean },
        {
          metadata: {
            name: "Tile",
            types: ["u32","u32","u32","u32","u32","u32","u32","u32","u32","u32","u32","u32","u32","bool"],
            customTypes: ["PlantsPatch","GridPosition","Tree","GridPosition","CellSize"],
          },
        }
      );
    })(),
  };
}
